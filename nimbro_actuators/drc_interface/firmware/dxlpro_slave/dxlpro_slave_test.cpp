// Unit tests for DXLPRO slave library
// Author: Max Schwarz <max.schwarz@uni-bonn.de>

#include "dxlpro_slave.h"

#include <catch_ros/catch.hpp>

#include <cstdio>

uint8_t g_ctrl_table[512];

std::vector<uint8_t> g_recvBuf;

static uint16_t update_crc(uint16_t crc_accum, uint8_t data)
{
	uint16_t i;

	static const uint16_t crc_table[256] = {
		0x0000, 0x8005, 0x800F, 0x000A, 0x801B, 0x001E, 0x0014, 0x8011,
		0x8033, 0x0036, 0x003C, 0x8039, 0x0028, 0x802D, 0x8027, 0x0022,
		0x8063, 0x0066, 0x006C, 0x8069, 0x0078, 0x807D, 0x8077, 0x0072,
		0x0050, 0x8055, 0x805F, 0x005A, 0x804B, 0x004E, 0x0044, 0x8041,
		0x80C3, 0x00C6, 0x00CC, 0x80C9, 0x00D8, 0x80DD, 0x80D7, 0x00D2,
		0x00F0, 0x80F5, 0x80FF, 0x00FA, 0x80EB, 0x00EE, 0x00E4, 0x80E1,
		0x00A0, 0x80A5, 0x80AF, 0x00AA, 0x80BB, 0x00BE, 0x00B4, 0x80B1,
		0x8093, 0x0096, 0x009C, 0x8099, 0x0088, 0x808D, 0x8087, 0x0082,
		0x8183, 0x0186, 0x018C, 0x8189, 0x0198, 0x819D, 0x8197, 0x0192,
		0x01B0, 0x81B5, 0x81BF, 0x01BA, 0x81AB, 0x01AE, 0x01A4, 0x81A1,
		0x01E0, 0x81E5, 0x81EF, 0x01EA, 0x81FB, 0x01FE, 0x01F4, 0x81F1,
		0x81D3, 0x01D6, 0x01DC, 0x81D9, 0x01C8, 0x81CD, 0x81C7, 0x01C2,
		0x0140, 0x8145, 0x814F, 0x014A, 0x815B, 0x015E, 0x0154, 0x8151,
		0x8173, 0x0176, 0x017C, 0x8179, 0x0168, 0x816D, 0x8167, 0x0162,
		0x8123, 0x0126, 0x012C, 0x8129, 0x0138, 0x813D, 0x8137, 0x0132,
		0x0110, 0x8115, 0x811F, 0x011A, 0x810B, 0x010E, 0x0104, 0x8101,
		0x8303, 0x0306, 0x030C, 0x8309, 0x0318, 0x831D, 0x8317, 0x0312,
		0x0330, 0x8335, 0x833F, 0x033A, 0x832B, 0x032E, 0x0324, 0x8321,
		0x0360, 0x8365, 0x836F, 0x036A, 0x837B, 0x037E, 0x0374, 0x8371,
		0x8353, 0x0356, 0x035C, 0x8359, 0x0348, 0x834D, 0x8347, 0x0342,
		0x03C0, 0x83C5, 0x83CF, 0x03CA, 0x83DB, 0x03DE, 0x03D4, 0x83D1,
		0x83F3, 0x03F6, 0x03FC, 0x83F9, 0x03E8, 0x83ED, 0x83E7, 0x03E2,
		0x83A3, 0x03A6, 0x03AC, 0x83A9, 0x03B8, 0x83BD, 0x83B7, 0x03B2,
		0x0390, 0x8395, 0x839F, 0x039A, 0x838B, 0x038E, 0x0384, 0x8381,
		0x0280, 0x8285, 0x828F, 0x028A, 0x829B, 0x029E, 0x0294, 0x8291,
		0x82B3, 0x02B6, 0x02BC, 0x82B9, 0x02A8, 0x82AD, 0x82A7, 0x02A2,
		0x82E3, 0x02E6, 0x02EC, 0x82E9, 0x02F8, 0x82FD, 0x82F7, 0x02F2,
		0x02D0, 0x82D5, 0x82DF, 0x02DA, 0x82CB, 0x02CE, 0x02C4, 0x82C1,
		0x8243, 0x0246, 0x024C, 0x8249, 0x0258, 0x825D, 0x8257, 0x0252,
		0x0270, 0x8275, 0x827F, 0x027A, 0x826B, 0x026E, 0x0264, 0x8261,
		0x0220, 0x8225, 0x822F, 0x022A, 0x823B, 0x023E, 0x0234, 0x8231,
		0x8213, 0x0216, 0x021C, 0x8219, 0x0208, 0x820D, 0x8207, 0x0202
	};

	i = ((uint16_t)(crc_accum >> 8) ^ data) & 0xFF;
	crc_accum = (crc_accum << 8) ^ crc_table[i];

	return crc_accum;
}

// Test stubs
extern "C"
{
	void dxlpro_slave_ctrl_set(uint16_t addr, uint8_t val)
	{
		REQUIRE(addr < sizeof(g_ctrl_table));
		g_ctrl_table[addr] = val;
	}

	uint8_t dxlpro_slave_ctrl_get(uint16_t addr)
	{
		REQUIRE(addr < sizeof(g_ctrl_table));
		return g_ctrl_table[addr];
	}

	void dxlpro_slave_send(uint8_t c)
	{
		g_recvBuf.push_back(c);
	}
}

// Utilities
void calcChecksum(uint8_t* packet, unsigned int size)
{
	uint16_t checksum = 0;
	for(unsigned int i = 0; i < size-2; ++i)
		checksum = update_crc(checksum, packet[i]);
	packet[size-2] = checksum & 0xFF;
	packet[size-1] = checksum >> 8;
}

TEST_CASE("ping", "[dxlpro]")
{
	g_recvBuf.clear();
	dxlpro_slave_init(0xAB, 0x1234, 0x22);

	dxlpro_slave_putc(0xFF);
	dxlpro_slave_putc(0xFF);
	dxlpro_slave_putc(0xFD);
	dxlpro_slave_putc(0x00);
	dxlpro_slave_putc(0xAB);
	dxlpro_slave_putc(0x03);
	dxlpro_slave_putc(0x00);
	dxlpro_slave_putc(0x01);

	// Checksum
	dxlpro_slave_putc(0x2A);
	dxlpro_slave_putc(0xC6);

	REQUIRE(g_recvBuf.size() == 14);

	uint8_t expected[] = {
		0xFF, 0xFF, 0xFD, 0x00,
		0xAB,
		0x07, 0x00,
		0x55,
		0x00,
		0x34,
		0x12,
		0x22,
		0x45,
		0x88
	};

	// Update checksum
	calcChecksum(expected, sizeof(expected));

	for(unsigned int i = 0; i < g_recvBuf.size(); ++i)
	{
		CAPTURE(i);
		REQUIRE((int)g_recvBuf[i] == (int)expected[i]);
	}
}

TEST_CASE("write", "[dxlpro]")
{
	g_recvBuf.clear();
	g_ctrl_table[10] = 0xDE;
	g_ctrl_table[11] = 0xAD;
	g_ctrl_table[12] = 0xBE;
	g_ctrl_table[13] = 0xEF;
	dxlpro_slave_init(0xAB, 0x1234, 0x22);

	uint8_t packet[] = {
		0xFF, 0xFF, 0xFD, 0x00,
		0xAB,
		0x09, 0x00,
		0x03,
		0x0A, 0x00,
		0x01,
		0x02,
		0x03,
		0x04,

		// Checksum
		0xFF,
		0xFF
	};

	// Update checksum
	calcChecksum(packet, sizeof(packet));

	for(unsigned int i = 0; i < sizeof(packet); ++i)
		dxlpro_slave_putc(packet[i]);

	REQUIRE((unsigned int)g_ctrl_table[10] == 0x01);
	REQUIRE((unsigned int)g_ctrl_table[11] == 0x02);
	REQUIRE((unsigned int)g_ctrl_table[12] == 0x03);
	REQUIRE((unsigned int)g_ctrl_table[13] == 0x04);
}

TEST_CASE("WRITE with escape sequence", "[dxlpro]")
{
	g_recvBuf.clear();
	g_ctrl_table[10] = 0xDE;
	g_ctrl_table[11] = 0xAD;
	g_ctrl_table[12] = 0xBE;
	g_ctrl_table[13] = 0xEF;
	dxlpro_slave_init(0xAB, 0x1234, 0x22);

	uint8_t packet[] = {
		0xFF, 0xFF, 0xFD, 0x00,
		0xAB,
		0x0A, 0x00,
		0x03,
		0x0A, 0x00,
		0xFF,
		0xFF,
		0xFD,
		0xFD,
		0x00,

		// Checksum
		0xFF,
		0xFF
	};

	// Update checksum
	calcChecksum(packet, sizeof(packet));

	for(unsigned int i = 0; i < sizeof(packet); ++i)
		dxlpro_slave_putc(packet[i]);

	REQUIRE((unsigned int)g_ctrl_table[10] == 0xFF);
	REQUIRE((unsigned int)g_ctrl_table[11] == 0xFF);
	REQUIRE((unsigned int)g_ctrl_table[12] == 0xFD);
	REQUIRE((unsigned int)g_ctrl_table[13] == 0x00);
}

TEST_CASE("SYNC_WRITE", "[dxlpro]")
{
	g_recvBuf.clear();
	g_ctrl_table[10] = 0xDE;
	g_ctrl_table[11] = 0xAD;
	g_ctrl_table[12] = 0xBE;
	g_ctrl_table[13] = 0xEF;
	dxlpro_slave_init(0xAB, 0x1234, 0x22);

	uint8_t packet[] = {
		0xFF, 0xFF, 0xFD, 0x00,
		0xFE,
		0x11, 0x00,
		0x83, // sync write
		0x0A, 0x00,
		0x04, 0x00,

		0xA0,
		0xDE,
		0xDE,
		0xDE,
		0xDE,

		0xAB,
		0x01,
		0x02,
		0x03,
		0x04,

		// Checksum
		0xFF,
		0xFF
	};

	// Update checksum
	calcChecksum(packet, sizeof(packet));

	for(unsigned int i = 0; i < sizeof(packet); ++i)
		dxlpro_slave_putc(packet[i]);

	REQUIRE((unsigned int)g_ctrl_table[10] == 0x01);
	REQUIRE((unsigned int)g_ctrl_table[11] == 0x02);
	REQUIRE((unsigned int)g_ctrl_table[12] == 0x03);
	REQUIRE((unsigned int)g_ctrl_table[13] == 0x04);
}

TEST_CASE("READ", "[dxlpro]")
{
	g_recvBuf.clear();
	g_ctrl_table[10] = 0x11;
	g_ctrl_table[11] = 0x22;
	g_ctrl_table[12] = 0x33;
	g_ctrl_table[13] = 0x44;
	dxlpro_slave_init(0xAB, 0x1234, 0x22);

	uint8_t packet[] = {
		0xFF, 0xFF, 0xFD, 0x00,
		0xAB,
		0x07, 0x00,
		0x02, // read

		// addr
		0x0A, 0x00,

		// length
		0x04, 0x00,

		// Checksum
		0xFF,
		0xFF
	};

	// Update checksum
	calcChecksum(packet, sizeof(packet));

	for(unsigned int i = 0; i < sizeof(packet); ++i)
		dxlpro_slave_putc(packet[i]);

	// Check response
	uint8_t expected[] = {
		0xFF, 0xFF, 0xFD, 0x00,
		0xAB,
		0x08, 0x00,
		0x55,

		0x00, // error
		0x11,
		0x22,
		0x33,
		0x44,

		// Checksum
		0xFF,
		0xFF
	};

	calcChecksum(expected, sizeof(expected));

	std::stringstream ss;
	ss << "received:";
	for(uint8_t x : g_recvBuf)
		ss << " " << std::hex << std::setw(2) << std::setfill('0') << (int)x << std::setw(0);

	INFO(ss.str());

	REQUIRE(g_recvBuf.size() == sizeof(expected));

	for(unsigned int i = 0; i < sizeof(expected); ++i)
	{
		CAPTURE(i);
		REQUIRE(g_recvBuf[i] == expected[i]);
	}
}

TEST_CASE("BULK_READ", "[dxlpro]")
{
	g_recvBuf.clear();
	g_ctrl_table[10] = 0x11;
	g_ctrl_table[11] = 0x22;
	g_ctrl_table[12] = 0x33;
	g_ctrl_table[13] = 0x44;
	dxlpro_slave_init(0xAB, 0x1234, 0x22);

	uint8_t packet[] = {
		0xFF, 0xFF, 0xFD, 0x00,
		0xFE,
		0x0D, 0x00,
		0x92, // bulk read

		0xA0, // ID
		0x04, 0x00, // start
		0x08, 0x00, // len

		0xAB, // ID
		0x0A, 0x00, // start
		0x04, 0x00, // len

		// Checksum
		0xFF,
		0xFF
	};

	// Update checksum
	calcChecksum(packet, sizeof(packet));

	for(unsigned int i = 0; i < sizeof(packet); ++i)
		dxlpro_slave_putc(packet[i]);

	// should wait for status packet of other servo
	REQUIRE(g_recvBuf.size() == 0);

	uint8_t packet2[] = {
		0xFF, 0xFF, 0xFD, 0x00,
		0xA0,
		0x0C, 0x00,
		0x55,

		0x00, // error
		0x11,
		0x22,
		0x33,
		0x44,
		0x55,
		0x66,
		0x77,
		0x88,

		// Checksum
		0xFF,
		0xFF
	};

	// Update checksum
	calcChecksum(packet2, sizeof(packet2));

	for(unsigned int i = 0; i < sizeof(packet2); ++i)
		dxlpro_slave_putc(packet2[i]);

	// Check response
	uint8_t expected[] = {
		0xFF, 0xFF, 0xFD, 0x00,
		0xAB,
		0x08, 0x00,
		0x55,

		0x00, // error
		0x11,
		0x22,
		0x33,
		0x44,

		// Checksum
		0xFF,
		0xFF
	};

	calcChecksum(expected, sizeof(expected));

	std::stringstream ss;
	ss << "received:";
	for(uint8_t x : g_recvBuf)
		ss << " " << std::hex << std::setw(2) << std::setfill('0') << (int)x << std::setw(0);

	INFO(ss.str());

	REQUIRE(g_recvBuf.size() == sizeof(expected));

	for(unsigned int i = 0; i < sizeof(expected); ++i)
	{
		CAPTURE(i);
		REQUIRE(g_recvBuf[i] == expected[i]);
	}
}

TEST_CASE("repeated BULK_READ", "[dxlpro]")
{
	for(int i = 0; i < (1 << 17); ++i)
	{
		g_recvBuf.clear();
		g_ctrl_table[10] = 0x11;
		g_ctrl_table[11] = 0x22 + i;
		g_ctrl_table[12] = 0x33;
		g_ctrl_table[13] = 0x44;
		dxlpro_slave_init(0xAB, 0x1234, 0x22);

		uint8_t packet[] = {
			0xFF, 0xFF, 0xFD, 0x00,
			0xFE,
			0x0D, 0x00,
			0x92, // bulk read

			0xA0, // ID
			0x04, 0x00, // start
			0x08, 0x00, // len

			0xAB, // ID
			0x0A, 0x00, // start
			0x04, 0x00, // len

			// Checksum
			0xFF,
			0xFF
		};

		// Update checksum
		calcChecksum(packet, sizeof(packet));

		for(unsigned int i = 0; i < sizeof(packet); ++i)
			dxlpro_slave_putc(packet[i]);

		// should wait for status packet of other servo
		REQUIRE(g_recvBuf.size() == 0);

		uint8_t packet2[] = {
			0xFF, 0xFF, 0xFD, 0x00,
			0xA0,
			0x0C, 0x00,
			0x55,

			0x00, // error
			0x11,
			0x22,
			0x33,
			0x44,
			0x55,
			0x66,
			0x77,
			0x88,

			// Checksum
			0xFF,
			0xFF
		};

		// Update checksum
		calcChecksum(packet2, sizeof(packet2));

		for(unsigned int i = 0; i < sizeof(packet2); ++i)
			dxlpro_slave_putc(packet2[i]);

		// Check response
		uint8_t expected[] = {
			0xFF, 0xFF, 0xFD, 0x00,
			0xAB,
			0x08, 0x00,
			0x55,

			0x00, // error
			0x11,
			(uint8_t)(0x22 + i),
			0x33,
			0x44,

			// Checksum
			0xFF,
			0xFF
		};

		calcChecksum(expected, sizeof(expected));

		std::stringstream ss;
		ss << "received:";
		for(uint8_t x : g_recvBuf)
			ss << " " << std::hex << std::setw(2) << std::setfill('0') << (int)x << std::setw(0);

		INFO(ss.str());

		REQUIRE(g_recvBuf.size() == sizeof(expected));

		for(unsigned int i = 0; i < sizeof(expected); ++i)
		{
			CAPTURE(i);
			REQUIRE(g_recvBuf[i] == expected[i]);
		}
	}
}

TEST_CASE("strange write", "[dxlpro]")
{
	dxlpro_slave_init(0xFC, 0x1234, 0x22);

	uint8_t packet[] = {
		0xFF, 0xFF, 0xFD, 0x00, 0xFC, 0x25, 0x00, 0x03, 0xE0, 0x01, 0x13, 0x82,
		0x16, 0x02, 0x1C, 0x02, 0x19, 0x82, 0x08, 0x02, 0x0D, 0x82, 0x07, 0x82,
		0x02, 0x02, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x4B, 0x24
	};

	for(unsigned int i = 0; i < sizeof(packet); ++i)
		dxlpro_slave_putc(packet[i]);

	REQUIRE(g_ctrl_table[511] == 0xFF);
}
